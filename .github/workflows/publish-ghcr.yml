name: Publish to GHCR

on:
  push:
    branches: [dev]
  release:
    types: [created]
  workflow_dispatch:
  pull_request:
    branches:
      - dev

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          remove-android: true
          remove-haskell: true
          remove-codeql: true

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Extract metadata
        id: meta
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            TAG_NAME="${{ github.event.release.tag_name }}"
            echo "GIT_TAG=$TAG_NAME" >> $GITHUB_ENV
            echo "IS_RELEASE=true" >> $GITHUB_ENV
          else
            git fetch --tags
            LATEST_TAG=$(git tag --list 'v*.*.*' | sort -V | tail -n1)
            FALLBACK_TAG="${LATEST_TAG:-v0.0.0}"
            
            PREFIX="dev"
            echo "GIT_TAG=${PREFIX}-${FALLBACK_TAG}-${SHORT_SHA}" >> $GITHUB_ENV
            echo "IS_RELEASE=false" >> $GITHUB_ENV
          fi
          
          echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy example.env to .env
        run: |
          echo "Copying example.env to .env..."
          find . -name "example.env" | while read f; do
            cp "$f" "$(dirname "$f")/.env"
            echo "Created $(dirname "$f")/.env"
          done

      - name: Build, tag, and push all *_service Docker Compose services
        run: |
          set -e

          SERVICES=$(docker compose config --services | grep '_service$')
          echo "Filtered services: $SERVICES"

          for SERVICE in $SERVICES; do
            IMAGE_NAME="ghcr.io/${{ env.REPO_OWNER_LC }}/$SERVICE:${{ env.GIT_TAG }}"
            echo "Building $SERVICE"
            docker compose build $SERVICE
            
            COMPOSE_IMAGE="omnipdf-${SERVICE}:latest"
            IMAGE_ID=$(docker image ls --filter=reference="${COMPOSE_IMAGE}" --format "{{.ID}}" | head -n 1)
            
            if [[ -z "$IMAGE_ID" ]]; then
              echo "Build failed: No image found for $SERVICE (expected $COMPOSE_IMAGE)"
              docker image ls
              exit 1
            fi
            
            echo "Tagging $IMAGE_ID as $IMAGE_NAME"
            docker tag "$IMAGE_ID" "$IMAGE_NAME"
            
            echo "Pushing $IMAGE_NAME"
            docker push "$IMAGE_NAME"
            
            if [[ "${{ env.IS_RELEASE }}" == "true" ]]; then
              LATEST_TAG="ghcr.io/${{ env.REPO_OWNER_LC }}/$SERVICE:latest"
              echo "Tagging and pushing as $LATEST_TAG"
              docker tag "$IMAGE_ID" "$LATEST_TAG"
              docker push "$LATEST_TAG"
            fi
          done
